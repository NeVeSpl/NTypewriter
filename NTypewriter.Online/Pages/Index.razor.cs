using System.Threading;
using System.Threading.Tasks;
using BlazorMonaco;
using Microsoft.AspNetCore.Components;

namespace NTypewriter.Online.Pages
{
    partial class Index
    {
        private MonacoEditor codeEditor;
        private MonacoEditor templateEditor;

        [Inject]
        private  Runner Runner { get; set; }





        private StandaloneEditorConstructionOptions CodeEditorConstructionOptions(MonacoEditor editor)
        {
            var options = new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "csharp", 
                Minimap = new EditorMinimapOptions() {Enabled = false}, 
                Folding = false, 
            };
            options.Value=
                @"
namespace WebApplication1.Models
{
    public class WeatherForecast
    {
        public DateOnly7 Date { get; set; }

        public int TemperatureC { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public string? Summary { get; set; }
    }
}
";


            return options;
        }
        private StandaloneEditorConstructionOptions TemplateEditorConstructionOptions(MonacoEditor editor)
        {
            var options = new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "handlebars",
                Minimap = new EditorMinimapOptions() { Enabled = false },
                Folding = false,
            };
            options.Value =
                @"
{{- for dto in data.Classes | Symbols.WhereNamespaceStartsWith ""WebApplication1.Models""
        capture output
-}}
// This file was autogenerated by https://github.com/NeVeSpl/NTypewriter

{{ Custom.HelloWorld }}

export class {{ dto.Name }} {{- if dto.HasBaseClass }} extends {{ dto.BaseClass.Name; end }}
{ 
{{- for prop in dto.Properties }}
    {{ prop.Name | String.ToCamelCase }}: {{ prop.Type | Type.ToTypeScriptType }};   
{{- end }}

    constructor()
    {
    {{  if dto.HasBaseClass }}    super(); {{-end }}
    {{- for prop in dto.Properties }}
        this.{{ prop.Name | String.ToCamelCase }} = {{ prop.Type | Type.ToTypeScriptDefault }};
    {{- end }}
    }
}
{{-     end
   Save output (""ts_client/dtos/"" + dto.FullName + "".tsx"")
   end 
}}
";
            return options;
        }
        private StandaloneEditorConstructionOptions OutputEditorConstructionOptions(MonacoEditor editor)
        {
            var options = new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "typescript",
                Minimap = new EditorMinimapOptions()
                { Enabled = false },
                Folding = false,
                ReadOnly = true
            };
            return options;
        }

        private CancellationTokenSource _typingCancellationSource = new CancellationTokenSource();
        

        private void OnKeyUp(KeyboardEvent keyboardEvent)
        {
            // ignore arrow keys
            if (keyboardEvent.KeyCode == KeyCode.LeftArrow ||
                keyboardEvent.KeyCode == KeyCode.RightArrow ||
                keyboardEvent.KeyCode == KeyCode.UpArrow ||
                keyboardEvent.KeyCode == KeyCode.DownArrow ||
                keyboardEvent.KeyCode == KeyCode.PageUp ||
                keyboardEvent.KeyCode == KeyCode.PageDown)
            {
                return;
            }

            

            _typingCancellationSource.Cancel();
            _typingCancellationSource = new CancellationTokenSource();
            _ = Update(_typingCancellationSource.Token);
        }


        private async Task Update(CancellationToken cancellationToken)
        {
            await Task.Delay(500, cancellationToken);

            if (cancellationToken.IsCancellationRequested)
            {
                return;
            }

            var code = await codeEditor.GetValue();
            var template = await codeEditor.GetValue();

            await Runner.RunAsync(code, template, cancellationToken);
        }
    }
}